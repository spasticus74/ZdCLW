/*
 * ZdCLSync
 *
 * This server is used to simplify keeping instances of the Zendesk Call Logger application up to date with the configured assets and site contacts. It also acts as an online backup of the calls logged by users of the app.  The Zendesk Call Logger application can be found [here](https://gitea.rantorium.com/MTS_ISC/zdcl).
 *
 * API version: 0.0.2
 * Contact: troy.campbell@global.komatsu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package service

import (
	"database/sql"
	"net/http"

	_ "github.com/mattn/go-sqlite3"

	"github.com/rs/zerolog/log"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	// ContextOAuth2 takes a oauth2.TokenSource as authentication for the request.
	ContextOAuth2 = contextKey("token")

	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = contextKey("basic")

	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = contextKey("accesstoken")

	// ContextAPIKey takes an APIKey as authentication for the request
	ContextAPIKey = contextKey("apikey")
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

type Configuration struct {
	BasePath      string            `json:"basePath,omitempty"`
	Host          string            `json:"host,omitempty"`
	Scheme        string            `json:"scheme,omitempty"`
	DefaultHeader map[string]string `json:"defaultHeader,omitempty"`
	UserAgent     string            `json:"userAgent,omitempty"`
	HTTPClient    *http.Client
}

func NewConfiguration() *Configuration {
	var host string
	db, err := sql.Open("sqlite3", "data/zd.db")
	if err != nil {
		log.Err(err).Msg("couldn't connect to database")
	}

	// get the required host for cloud services
	rows, err := db.Query("SELECT updatehost FROM settings WHERE id = 1")
	if err != nil {
		log.Err(err).Msg("couldn't select updatehost")
	}
	defer rows.Close()

	// there should only ever be one row
	for rows.Next() {
		err = rows.Scan(&host)
		if err != nil {
			log.Err(err).Msg("couldn't scan row")
		}
	}
	cfg := &Configuration{
		BasePath:      host,
		DefaultHeader: make(map[string]string),
		UserAgent:     "zdcl",
	}
	return cfg
}

func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}
